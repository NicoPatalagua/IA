{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h1> Trabajo Algoritmos Genéticos</h1>"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Problemas de las N Reinas"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Nicolás Patalagua   ~ Sebastián Díaz"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Primer Punto</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generacion #1\n",
      "Fitness promedio:9.8 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "Generacion #2\n",
      "Fitness promedio:9.98 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "Generacion #3\n",
      "Fitness promedio:10.17 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "Generacion #4\n",
      "Fitness promedio:10.18 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "Generacion #5\n",
      "Fitness promedio:9.94 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "Generacion #6\n",
      "Fitness promedio:9.68 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "Generacion #7\n",
      "Fitness promedio:9.59 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "Generacion #8\n",
      "Fitness promedio:10.08 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "Generacion #9\n",
      "Fitness promedio:10.45 \n",
      "Mejor Individuo: (0, [5, 2, 6, 1, 7, 4, 0, 3])\n",
      "[9.8, 9.98, 10.17, 10.18, 9.94, 9.68, 9.59, 10.08, 10.45]\n",
      "Generacion #1\n",
      "Fitness promedio:9.94 \n",
      "Mejor Individuo: (22, [4, 3, 2, 5, 6, 7, 0, 1])\n",
      "Generacion #2\n",
      "Fitness promedio:9.9 \n",
      "Mejor Individuo: (18, [7, 0, 5, 2, 3, 4, 6, 1])\n",
      "Generacion #3\n",
      "Fitness promedio:10.16 \n",
      "Mejor Individuo: (20, [3, 7, 0, 5, 4, 6, 2, 1])\n",
      "Generacion #4\n",
      "Fitness promedio:11.08 \n",
      "Mejor Individuo: (36, [0, 1, 2, 7, 4, 5, 6, 3])\n",
      "Generacion #5\n",
      "Fitness promedio:11.0 \n",
      "Mejor Individuo: (34, [6, 5, 4, 3, 2, 7, 0, 1])\n",
      "Generacion #6\n",
      "Fitness promedio:9.98 \n",
      "Mejor Individuo: (34, [6, 5, 4, 3, 2, 7, 0, 1])\n",
      "Generacion #7\n",
      "Fitness promedio:9.8 \n",
      "Mejor Individuo: (22, [1, 7, 0, 6, 5, 4, 3, 2])\n",
      "Generacion #8\n",
      "Fitness promedio:9.62 \n",
      "Mejor Individuo: (22, [6, 1, 0, 5, 4, 3, 2, 7])\n",
      "Generacion #9\n",
      "Fitness promedio:10.62 \n",
      "Mejor Individuo: (32, [6, 7, 5, 4, 3, 2, 1, 0])\n",
      "[9.94, 9.9, 10.16, 11.08, 11.0, 9.98, 9.8, 9.62, 10.62]\n",
      "Generacion #1\n",
      "Fitness promedio:9.96 \n",
      "Mejor Individuo: (2, [1, 6, 2, 5, 7, 0, 4, 3])\n",
      "Generacion #2\n",
      "Fitness promedio:9.82 \n",
      "Mejor Individuo: (2, [2, 7, 5, 1, 4, 0, 3, 6])\n",
      "Generacion #3\n",
      "Fitness promedio:9.5 \n",
      "Mejor Individuo: (2, [3, 5, 7, 1, 4, 6, 2, 0])\n",
      "Generacion #4\n",
      "Fitness promedio:10.14 \n",
      "Mejor Individuo: (0, [4, 6, 1, 5, 2, 0, 3, 7])\n",
      "Generacion #5\n",
      "Fitness promedio:11.16 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 0, 4])\n",
      "Generacion #6\n",
      "Fitness promedio:10.1 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 0, 4])\n",
      "Generacion #7\n",
      "Fitness promedio:10.28 \n",
      "Mejor Individuo: (0, [2, 4, 1, 7, 0, 6, 3, 5])\n",
      "Generacion #8\n",
      "Fitness promedio:10.38 \n",
      "Mejor Individuo: (0, [4, 6, 1, 5, 2, 0, 7, 3])\n",
      "Generacion #9\n",
      "Fitness promedio:10.74 \n",
      "Mejor Individuo: (2, [5, 7, 4, 0, 3, 1, 6, 2])\n",
      "[9.96, 9.82, 9.5, 10.14, 11.16, 10.1, 10.28, 10.38, 10.74]\n",
      "Generacion #1\n",
      "Fitness promedio:10.8 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "Generacion #2\n",
      "Fitness promedio:10.09 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "Generacion #3\n",
      "Fitness promedio:10.57 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "Generacion #4\n",
      "Fitness promedio:10.25 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "Generacion #5\n",
      "Fitness promedio:10.41 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "Generacion #6\n",
      "Fitness promedio:10.43 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "Generacion #7\n",
      "Fitness promedio:9.79 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "Generacion #8\n",
      "Fitness promedio:9.99 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "Generacion #9\n",
      "Fitness promedio:10.1 \n",
      "Mejor Individuo: (0, [4, 2, 0, 6, 1, 7, 5, 3])\n",
      "[10.8, 10.09, 10.57, 10.25, 10.41, 10.43, 9.79, 9.99, 10.1]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "from pyeasyga import pyeasyga\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def create_individual(data):\n",
    "    individual = data[:]\n",
    "    random.shuffle(individual)\n",
    "    return individual\n",
    "\n",
    "def crossover(parent_1, parent_2):\n",
    "    crossover_index = random.randrange(1, len(parent_1))\n",
    "    child_1a = parent_1[:crossover_index]\n",
    "    child_1b = [i for i in parent_2 if i not in child_1a]\n",
    "    child_1 = child_1a + child_1b\n",
    "    child_2a = parent_2[crossover_index:]\n",
    "    child_2b = [i for i in parent_1 if i not in child_2a]\n",
    "    child_2 = child_2a + child_2b\n",
    "    return child_1, child_2\n",
    "\n",
    "def mutate(individual):\n",
    "    mutate_index1 = random.randrange(len(individual))\n",
    "    mutate_index2 = random.randrange(len(individual))\n",
    "    individual[mutate_index1], individual[mutate_index2] = individual[mutate_index2], individual[mutate_index1]\n",
    "\n",
    "\n",
    "def selection(population):\n",
    "    return random.choice(population)\n",
    "\n",
    "\n",
    "def fitness (individual, data):\n",
    "    collisions = 0\n",
    "    for item in individual:\n",
    "        item_index = individual.index(item)\n",
    "        for elem in individual:\n",
    "            elem_index = individual.index(elem)\n",
    "            if item_index != elem_index:\n",
    "                if item - (elem_index - item_index) == elem or (elem_index - item_index) + item == elem:\n",
    "                    collisions += 1\n",
    "    return collisions\n",
    "\n",
    "def print_board(board_representation):\n",
    "    def print_x_in_row(row_length, x_position):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "        print('\\n|', end = '')\n",
    "        for i in range(row_length):\n",
    "            if i == x_position:\n",
    "                print('{} |'.format('X'), end = '')\n",
    "            else:\n",
    "                print('  |', end = '')\n",
    "        print('')\n",
    "\n",
    "    def print_board_bottom(row_length):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "\n",
    "    num_of_rows = len(board_representation)\n",
    "    row_length = num_of_rows  \n",
    "\n",
    "    for row in range(num_of_rows):\n",
    "        print_x_in_row(row_length, board_representation[row])\n",
    "\n",
    "    print_board_bottom(row_length)\n",
    "    print('\\n', end = '')\n",
    "\n",
    "def datos_generacion():\n",
    "    fitness_po = [i.fitness for i in ga.current_generation]\n",
    "    average = sum(fitness_po)/len(fitness_po)\n",
    "    print(\"Fitness promedio:{} \".format(average))\n",
    "    print(\"Mejor Individuo: {}\".format(ga.best_individual()))\n",
    "    return average\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness  \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "\n",
    "ejemplo1 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo1.append(datos_generacion())\n",
    "\n",
    "print(ejemplo1)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=100,\n",
    "                            generations=500,\n",
    "                            crossover_probability=0.4,\n",
    "                            mutation_probability=0.25,\n",
    "                            elitism=False,\n",
    "                            maximise_fitness=True)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo2 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo2.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo2)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=100,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.8,\n",
    "                            elitism=False,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo3 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo3.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo3)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=1,\n",
    "                            mutation_probability=1,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo4 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo4.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo4)\n",
    "\n",
    "labels = ['G1', 'G2', 'G3', 'G4', 'G5','G6', 'G7', 'G8', 'G9']\n",
    "plt.plot(labels, ejemplo1,'o-', labels, ejemplo2,'o-', labels, ejemplo3,'o-',labels, ejemplo4,'o-')\n",
    "plt.title('Evolución fitness de la población con parametros distintos')\n",
    "plt.xlabel('Generacion')\n",
    "plt.ylabel('Fitness promedio')\n",
    "plt.legend(('Ejemplo1', 'Ejemplo2', 'Ejemplo2','Ejemplo4'))\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Para este punto debemos instalar la libreria matplotlib con los comandos (pip install -U pip) y  (pip install -U matplotlib)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Segundo Punto</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generacion #1\n",
      "Fitness promedio:10.28 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "Generacion #2\n",
      "Fitness promedio:9.87 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "Generacion #3\n",
      "Fitness promedio:9.45 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "Generacion #4\n",
      "Fitness promedio:9.32 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "Generacion #5\n",
      "Fitness promedio:9.35 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "Generacion #6\n",
      "Fitness promedio:9.87 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "Generacion #7\n",
      "Fitness promedio:10.61 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "Generacion #8\n",
      "Fitness promedio:10.51 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "Generacion #9\n",
      "Fitness promedio:10.59 \n",
      "Mejor Individuo: (0, [4, 1, 5, 0, 6, 3, 7, 2])\n",
      "[10.28, 9.87, 9.45, 9.32, 9.35, 9.87, 10.61, 10.51, 10.59]\n",
      "[3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5, 3.5]\n",
      "['G#1', 'G#2', 'G#3', 'G#4', 'G#5', 'G#6', 'G#7', 'G#8', 'G#9']\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 648x144 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "from pyeasyga import pyeasyga\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def create_individual(data):\n",
    "    individual = data[:]\n",
    "    random.shuffle(individual)\n",
    "    return individual\n",
    "\n",
    "def crossover(parent_1, parent_2):\n",
    "    crossover_index = random.randrange(1, len(parent_1))\n",
    "    child_1a = parent_1[:crossover_index]\n",
    "    child_1b = [i for i in parent_2 if i not in child_1a]\n",
    "    child_1 = child_1a + child_1b\n",
    "    child_2a = parent_2[crossover_index:]\n",
    "    child_2b = [i for i in parent_1 if i not in child_2a]\n",
    "    child_2 = child_2a + child_2b\n",
    "    return child_1, child_2\n",
    "\n",
    "def mutate(individual):\n",
    "    mutate_index1 = random.randrange(len(individual))\n",
    "    mutate_index2 = random.randrange(len(individual))\n",
    "    individual[mutate_index1], individual[mutate_index2] = individual[mutate_index2], individual[mutate_index1]\n",
    "\n",
    "\n",
    "def selection(population):\n",
    "    return random.choice(population)\n",
    "\n",
    "\n",
    "def fitness (individual, data):\n",
    "    collisions = 0\n",
    "    for item in individual:\n",
    "        item_index = individual.index(item)\n",
    "        for elem in individual:\n",
    "            elem_index = individual.index(elem)\n",
    "            if item_index != elem_index:\n",
    "                if item - (elem_index - item_index) == elem or (elem_index - item_index) + item == elem:\n",
    "                    collisions += 1\n",
    "    return collisions\n",
    "\n",
    "def print_board(board_representation):\n",
    "    def print_x_in_row(row_length, x_position):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "        print('\\n|', end = '')\n",
    "        for i in range(row_length):\n",
    "            if i == x_position:\n",
    "                print('{} |'.format('X'), end = '')\n",
    "            else:\n",
    "                print('  |', end = '')\n",
    "        print('')\n",
    "\n",
    "    def print_board_bottom(row_length):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "\n",
    "    num_of_rows = len(board_representation)\n",
    "    row_length = num_of_rows    #rows == columns in a chessboard\n",
    "\n",
    "    for row in range(num_of_rows):\n",
    "        print_x_in_row(row_length, board_representation[row])\n",
    "\n",
    "    print_board_bottom(row_length)\n",
    "   # print('\\n', end = '')\n",
    "\n",
    "def datos_generacion():\n",
    "    fitness_po = [i.fitness for i in ga.current_generation]\n",
    "    average = sum(fitness_po)/len(fitness_po)\n",
    "    print(\"Fitness promedio:{} \".format(average))\n",
    "    print(\"Mejor Individuo: {}\".format(ga.best_individual()))\n",
    "    \n",
    "    return average\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness    \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "\n",
    "labels = []\n",
    "ejemplo1 = []\n",
    "ejemplo2 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    labels.append(\"G#{}\".format(i))\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo1.append(datos_generacion())\n",
    "    ejemplo2.append( sum(ga.best_individual()[1])/len(ga.best_individual()[1]) )\n",
    "\n",
    "print(ejemplo1)\n",
    "print(ejemplo2)\n",
    "print(labels)\n",
    "fig, axs = plt.subplots(1, 2, figsize=(9, 2), sharey=True)\n",
    "axs[0].plot(labels, ejemplo1,'o-')\n",
    "axs[1].plot(labels, ejemplo2,'o-')\n",
    "fig.suptitle('Fitness por generación                            Fitness del mejor individuo')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Tercer Punto</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generacion #1\n",
      "Fitness promedio:7.0 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "Generacion #2\n",
      "Fitness promedio:5.6 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "Generacion #3\n",
      "Fitness promedio:7.6 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "Generacion #4\n",
      "Fitness promedio:8.2 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "Generacion #5\n",
      "Fitness promedio:9.0 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "Generacion #6\n",
      "Fitness promedio:4.6 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "Generacion #7\n",
      "Fitness promedio:6.0 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "Generacion #8\n",
      "Fitness promedio:7.6 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "Generacion #9\n",
      "Fitness promedio:9.8 \n",
      "Mejor Individuo: (0, [7, 2, 0, 5, 1, 4, 6, 3])\n",
      "[7.0, 5.6, 7.6, 8.2, 9.0, 4.6, 6.0, 7.6, 9.8]\n",
      "Generacion #1\n",
      "Fitness promedio:9.92 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "Generacion #2\n",
      "Fitness promedio:9.0 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "Generacion #3\n",
      "Fitness promedio:9.04 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "Generacion #4\n",
      "Fitness promedio:8.24 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "Generacion #5\n",
      "Fitness promedio:7.96 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "Generacion #6\n",
      "Fitness promedio:7.96 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "Generacion #7\n",
      "Fitness promedio:8.28 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "Generacion #8\n",
      "Fitness promedio:8.48 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "Generacion #9\n",
      "Fitness promedio:8.92 \n",
      "Mejor Individuo: (0, [3, 1, 6, 2, 5, 7, 4, 0])\n",
      "[9.92, 9.0, 9.04, 8.24, 7.96, 7.96, 8.28, 8.48, 8.92]\n",
      "Generacion #1\n",
      "Fitness promedio:8.96 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "Generacion #2\n",
      "Fitness promedio:9.76 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "Generacion #3\n",
      "Fitness promedio:9.1 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "Generacion #4\n",
      "Fitness promedio:9.9 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "Generacion #5\n",
      "Fitness promedio:8.68 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "Generacion #6\n",
      "Fitness promedio:9.9 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "Generacion #7\n",
      "Fitness promedio:8.92 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "Generacion #8\n",
      "Fitness promedio:8.98 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "Generacion #9\n",
      "Fitness promedio:9.28 \n",
      "Mejor Individuo: (0, [2, 4, 6, 0, 3, 1, 7, 5])\n",
      "[8.96, 9.76, 9.1, 9.9, 8.68, 9.9, 8.92, 8.98, 9.28]\n",
      "Generacion #1\n",
      "Fitness promedio:10.488 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "Generacion #2\n",
      "Fitness promedio:10.328 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "Generacion #3\n",
      "Fitness promedio:10.496 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "Generacion #4\n",
      "Fitness promedio:10.0 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "Generacion #5\n",
      "Fitness promedio:10.136 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "Generacion #6\n",
      "Fitness promedio:9.784 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "Generacion #7\n",
      "Fitness promedio:9.38 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "Generacion #8\n",
      "Fitness promedio:9.4 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "Generacion #9\n",
      "Fitness promedio:9.984 \n",
      "Mejor Individuo: (0, [4, 0, 7, 3, 1, 6, 2, 5])\n",
      "[10.488, 10.328, 10.496, 10.0, 10.136, 9.784, 9.38, 9.4, 9.984]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "from pyeasyga import pyeasyga\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def create_individual(data):\n",
    "    individual = data[:]\n",
    "    random.shuffle(individual)\n",
    "    return individual\n",
    "\n",
    "def crossover(parent_1, parent_2):\n",
    "    crossover_index = random.randrange(1, len(parent_1))\n",
    "    child_1a = parent_1[:crossover_index]\n",
    "    child_1b = [i for i in parent_2 if i not in child_1a]\n",
    "    child_1 = child_1a + child_1b\n",
    "    child_2a = parent_2[crossover_index:]\n",
    "    child_2b = [i for i in parent_1 if i not in child_2a]\n",
    "    child_2 = child_2a + child_2b\n",
    "    return child_1, child_2\n",
    "\n",
    "def mutate(individual):\n",
    "    mutate_index1 = random.randrange(len(individual))\n",
    "    mutate_index2 = random.randrange(len(individual))\n",
    "    individual[mutate_index1], individual[mutate_index2] = individual[mutate_index2], individual[mutate_index1]\n",
    "\n",
    "\n",
    "def selection(population):\n",
    "    return random.choice(population)\n",
    "\n",
    "\n",
    "def fitness (individual, data):\n",
    "    collisions = 0\n",
    "    for item in individual:\n",
    "        item_index = individual.index(item)\n",
    "        for elem in individual:\n",
    "            elem_index = individual.index(elem)\n",
    "            if item_index != elem_index:\n",
    "                if item - (elem_index - item_index) == elem or (elem_index - item_index) + item == elem:\n",
    "                    collisions += 1\n",
    "    return collisions\n",
    "\n",
    "def print_board(board_representation):\n",
    "    def print_x_in_row(row_length, x_position):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "        print('\\n|', end = '')\n",
    "        for i in range(row_length):\n",
    "            if i == x_position:\n",
    "                print('{} |'.format('X'), end = '')\n",
    "            else:\n",
    "                print('  |', end = '')\n",
    "        print('')\n",
    "\n",
    "    def print_board_bottom(row_length):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "\n",
    "    num_of_rows = len(board_representation)\n",
    "    row_length = num_of_rows    #rows == columns in a chessboard\n",
    "\n",
    "    for row in range(num_of_rows):\n",
    "        print_x_in_row(row_length, board_representation[row])\n",
    "\n",
    "    print_board_bottom(row_length)\n",
    "    print('\\n', end = '')\n",
    "\n",
    "def datos_generacion():\n",
    "    fitness_po = [i.fitness for i in ga.current_generation]\n",
    "    average = sum(fitness_po)/len(fitness_po)\n",
    "    print(\"Fitness promedio:{} \".format(average))\n",
    "    print(\"Mejor Individuo: {}\".format(ga.best_individual()))\n",
    "    return average\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=10,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness  \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "\n",
    "ejemplo1 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo1.append(datos_generacion())\n",
    "\n",
    "print(ejemplo1)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=50,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo2 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo2.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo2)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=100,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo3 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo3.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo3)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=500,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo4 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo4.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo4)\n",
    "\n",
    "labels = ['G1', 'G2', 'G3', 'G4', 'G5','G6', 'G7', 'G8', 'G9']\n",
    "\n",
    "plt.plot(labels, ejemplo1,'o-', labels, ejemplo2,'o-', labels, ejemplo3,'o-', labels, ejemplo4,'o-')\n",
    "plt.legend(('10', '50', '100','500'))\n",
    "plt.title('Fitness promedio de la población')\n",
    "plt.xlabel('Generacion')\n",
    "plt.ylabel('Fitness promedio')\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Los algoritmos géneticos trabajan con población de individuos los cuales representa una \n",
    "solución factible a un problema dado. Entre mayor sea la población va a ser mayor la cantidad \n",
    "de caracteristicas en comparación con una población pequeña, favoreciendo el cruce de individuos\n",
    "mejor adaptados."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Cuarto Punto</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generacion #1\n",
      "Fitness promedio:9.75 \n",
      "Mejor Individuo: (2, [0, 5, 1, 4, 6, 3, 7, 2])\n",
      "Generacion #2\n",
      "Fitness promedio:9.74 \n",
      "Mejor Individuo: (0, [4, 1, 3, 5, 7, 2, 0, 6])\n",
      "Generacion #3\n",
      "Fitness promedio:9.76 \n",
      "Mejor Individuo: (0, [2, 5, 1, 4, 7, 0, 6, 3])\n",
      "Generacion #4\n",
      "Fitness promedio:10.01 \n",
      "Mejor Individuo: (0, [4, 1, 3, 5, 7, 2, 0, 6])\n",
      "Generacion #5\n",
      "Fitness promedio:10.4 \n",
      "Mejor Individuo: (2, [3, 1, 7, 2, 0, 6, 4, 5])\n",
      "Generacion #6\n",
      "Fitness promedio:10.62 \n",
      "Mejor Individuo: (2, [0, 5, 3, 1, 6, 7, 2, 4])\n",
      "Generacion #7\n",
      "Fitness promedio:10.46 \n",
      "Mejor Individuo: (2, [0, 6, 3, 1, 5, 7, 2, 4])\n",
      "Generacion #8\n",
      "Fitness promedio:10.43 \n",
      "Mejor Individuo: (0, [4, 2, 0, 5, 7, 1, 3, 6])\n",
      "Generacion #9\n",
      "Fitness promedio:10.17 \n",
      "Mejor Individuo: (0, [4, 2, 0, 5, 7, 1, 3, 6])\n",
      "[9.75, 9.74, 9.76, 10.01, 10.4, 10.62, 10.46, 10.43, 10.17]\n",
      "['G#1', 'G#2', 'G#3', 'G#4', 'G#5', 'G#6', 'G#7', 'G#8', 'G#9']\n"
     ]
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "from pyeasyga import pyeasyga\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def create_individual(data):\n",
    "    individual = data[:]\n",
    "    random.shuffle(individual)\n",
    "    return individual\n",
    "\n",
    "def crossover(parent_1, parent_2):\n",
    "    crossover_index = random.randrange(1, len(parent_1))\n",
    "    child_1a = parent_1[:crossover_index]\n",
    "    child_1b = [i for i in parent_2 if i not in child_1a]\n",
    "    child_1 = child_1a + child_1b\n",
    "    child_2a = parent_2[crossover_index:]\n",
    "    child_2b = [i for i in parent_1 if i not in child_2a]\n",
    "    child_2 = child_2a + child_2b\n",
    "    return child_1, child_2\n",
    "\n",
    "def mutate(individual):\n",
    "    mutate_index1 = random.randrange(len(individual))\n",
    "    mutate_index2 = random.randrange(len(individual))\n",
    "    individual[mutate_index1], individual[mutate_index2] = individual[mutate_index2], individual[mutate_index1]\n",
    "\n",
    "def selection(population):\n",
    "    return random.choice(population)\n",
    "\n",
    "def fitness (individual, data):\n",
    "    collisions = 0\n",
    "    for item in individual:\n",
    "        item_index = individual.index(item)\n",
    "        for elem in individual:\n",
    "            elem_index = individual.index(elem)\n",
    "            if item_index != elem_index:\n",
    "                if item - (elem_index - item_index) == elem or (elem_index - item_index) + item == elem:\n",
    "                    collisions += 1\n",
    "    return collisions\n",
    "\n",
    "def print_board(board_representation):\n",
    "    def print_x_in_row(row_length, x_position):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "        print('\\n|', end = '')\n",
    "        for i in range(row_length):\n",
    "            if i == x_position:\n",
    "                print('{} |'.format('X'), end = '')\n",
    "            else:\n",
    "                print('  |', end = '')\n",
    "        print('')\n",
    "\n",
    "    def print_board_bottom(row_length):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "\n",
    "    num_of_rows = len(board_representation)\n",
    "    row_length = num_of_rows \n",
    "\n",
    "    for row in range(num_of_rows):\n",
    "        print_x_in_row(row_length, board_representation[row])\n",
    "\n",
    "    print_board_bottom(row_length)\n",
    "    print('\\n', end = '')\n",
    "\n",
    "def datos_generacion():\n",
    "    fitness_po = [i.fitness for i in ga.current_generation]\n",
    "    average = sum(fitness_po)/len(fitness_po)\n",
    "    print(\"Fitness promedio:{} \".format(average))\n",
    "    print(\"Mejor Individuo: {}\".format(ga.best_individual()))\n",
    "    \n",
    "    return average\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=False,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness  \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "\n",
    "labels = []\n",
    "ejemplo1 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    labels.append(\"G#{}\".format(i))\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo1.append(datos_generacion())\n",
    "\n",
    "print(ejemplo1)\n",
    "print(labels)\n",
    "\n",
    "plt.plot(ejemplo1,'o-',linewidth=1,color=\"g\")\n",
    "plt.title('Fitness por generacion sin elitismo')\n",
    "plt.xlabel('Generacion sin elitismo')\n",
    "plt.ylabel('Fitness promedio')\n",
    "plt.grid()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "El elitismo se encarga de evitar que se pierda la mejor solución por lo que una variación o cambio\n",
    "en este hará que la calidad de una solución obtenida disminuira en una nueva generación, es decir, \n",
    "sin el elitismo los mejores organismos de una generación no se podrán trasladar a uno nuevo."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Quinto Punto</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generacion #1\n",
      "Fitness promedio:9.08 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "Generacion #2\n",
      "Fitness promedio:9.22 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "Generacion #3\n",
      "Fitness promedio:9.63 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "Generacion #4\n",
      "Fitness promedio:9.68 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "Generacion #5\n",
      "Fitness promedio:10.08 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "Generacion #6\n",
      "Fitness promedio:10.16 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "Generacion #7\n",
      "Fitness promedio:10.22 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "Generacion #8\n",
      "Fitness promedio:10.09 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "Generacion #9\n",
      "Fitness promedio:10.52 \n",
      "Mejor Individuo: (0, [2, 5, 3, 0, 7, 4, 6, 1])\n",
      "[9.08, 9.22, 9.63, 9.68, 10.08, 10.16, 10.22, 10.09, 10.52]\n",
      "Generacion #1\n",
      "Fitness promedio:8.91 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "Generacion #2\n",
      "Fitness promedio:9.13 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "Generacion #3\n",
      "Fitness promedio:9.51 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "Generacion #4\n",
      "Fitness promedio:9.65 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "Generacion #5\n",
      "Fitness promedio:9.43 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "Generacion #6\n",
      "Fitness promedio:9.39 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "Generacion #7\n",
      "Fitness promedio:9.94 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "Generacion #8\n",
      "Fitness promedio:9.5 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "Generacion #9\n",
      "Fitness promedio:9.46 \n",
      "Mejor Individuo: (0, [6, 4, 2, 0, 5, 7, 1, 3])\n",
      "[8.91, 9.13, 9.51, 9.65, 9.43, 9.39, 9.94, 9.5, 9.46]\n",
      "Generacion #1\n",
      "Fitness promedio:9.62 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "Generacion #2\n",
      "Fitness promedio:9.7 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "Generacion #3\n",
      "Fitness promedio:9.8 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "Generacion #4\n",
      "Fitness promedio:9.88 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "Generacion #5\n",
      "Fitness promedio:9.22 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "Generacion #6\n",
      "Fitness promedio:9.62 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "Generacion #7\n",
      "Fitness promedio:9.7 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "Generacion #8\n",
      "Fitness promedio:10.18 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "Generacion #9\n",
      "Fitness promedio:10.34 \n",
      "Mejor Individuo: (0, [6, 2, 0, 5, 7, 4, 1, 3])\n",
      "[9.62, 9.7, 9.8, 9.88, 9.22, 9.62, 9.7, 10.18, 10.34]\n",
      "Generacion #1\n",
      "Fitness promedio:9.52 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "Generacion #2\n",
      "Fitness promedio:8.8 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "Generacion #3\n",
      "Fitness promedio:8.3 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "Generacion #4\n",
      "Fitness promedio:9.08 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "Generacion #5\n",
      "Fitness promedio:8.54 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "Generacion #6\n",
      "Fitness promedio:8.84 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "Generacion #7\n",
      "Fitness promedio:9.06 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "Generacion #8\n",
      "Fitness promedio:9.26 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "Generacion #9\n",
      "Fitness promedio:9.32 \n",
      "Mejor Individuo: (0, [5, 7, 1, 3, 0, 6, 4, 2])\n",
      "[9.52, 8.8, 8.3, 9.08, 8.54, 8.84, 9.06, 9.26, 9.32]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "from pyeasyga import pyeasyga\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def create_individual(data):\n",
    "    individual = data[:]\n",
    "    random.shuffle(individual)\n",
    "    return individual\n",
    "\n",
    "def crossover(parent_1, parent_2):\n",
    "    crossover_index = random.randrange(1, len(parent_1))\n",
    "    child_1a = parent_1[:crossover_index]\n",
    "    child_1b = [i for i in parent_2 if i not in child_1a]\n",
    "    child_1 = child_1a + child_1b\n",
    "    child_2a = parent_2[crossover_index:]\n",
    "    child_2b = [i for i in parent_1 if i not in child_2a]\n",
    "    child_2 = child_2a + child_2b\n",
    "    return child_1, child_2\n",
    "\n",
    "def mutate(individual):\n",
    "    mutate_index1 = random.randrange(len(individual))\n",
    "    mutate_index2 = random.randrange(len(individual))\n",
    "    individual[mutate_index1], individual[mutate_index2] = individual[mutate_index2], individual[mutate_index1]\n",
    "\n",
    "\n",
    "def selection(population):\n",
    "    return random.choice(population)\n",
    "\n",
    "\n",
    "def fitness (individual, data):\n",
    "    collisions = 0\n",
    "    for item in individual:\n",
    "        item_index = individual.index(item)\n",
    "        for elem in individual:\n",
    "            elem_index = individual.index(elem)\n",
    "            if item_index != elem_index:\n",
    "                if item - (elem_index - item_index) == elem or (elem_index - item_index) + item == elem:\n",
    "                    collisions += 1\n",
    "    return collisions\n",
    "\n",
    "def print_board(board_representation):\n",
    "    def print_x_in_row(row_length, x_position):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "        print('\\n|', end = '')\n",
    "        for i in range(row_length):\n",
    "            if i == x_position:\n",
    "                print('{} |'.format('X'), end = '')\n",
    "            else:\n",
    "                print('  |', end = '')\n",
    "        print('')\n",
    "\n",
    "    def print_board_bottom(row_length):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "\n",
    "    num_of_rows = len(board_representation)\n",
    "    row_length = num_of_rows    #rows == columns in a chessboard\n",
    "\n",
    "    for row in range(num_of_rows):\n",
    "        print_x_in_row(row_length, board_representation[row])\n",
    "\n",
    "    print_board_bottom(row_length)\n",
    "    print('\\n', end = '')\n",
    "\n",
    "def datos_generacion():\n",
    "    fitness_po = [i.fitness for i in ga.current_generation]\n",
    "    average = sum(fitness_po)/len(fitness_po)\n",
    "    print(\"Fitness promedio:{} \".format(average))\n",
    "    print(\"Mejor Individuo: {}\".format(ga.best_individual()))\n",
    "    return average\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "# Vamos a utilizar la librería pyeasyga que se encarga de los procesos de iteración del algoritmo. Creamos una instancia de la clase.\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.1,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness  \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "\n",
    "ejemplo1 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo1.append(datos_generacion())\n",
    "\n",
    "print(ejemplo1)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.5,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo2 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo2.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo2)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=100,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo3 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo3.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo3)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=100,\n",
    "                            generations=100,\n",
    "                            crossover_probability=1,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo4 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo4.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo4)\n",
    "\n",
    "labels = ['G1', 'G2', 'G3', 'G4', 'G5','G6', 'G7', 'G8', 'G9']\n",
    "plt.plot(labels, ejemplo1,'o-', labels, ejemplo2,'o-', labels, ejemplo3,'o-',labels, ejemplo4,'o-')\n",
    "plt.title('Fitness promedio crossover')\n",
    "plt.xlabel('Generacion')\n",
    "plt.ylabel('Fitness promedio')\n",
    "plt.legend(('0.1', '0.5', '0.8','1'))\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    " Entre mayor es la probabilidad del crossover mayor será el uso de soluciones, reduciendo la\n",
    "psobilidad de establecerse en un optimo falso. En caso de que esta probabilidad sea muy alta se genera un\n",
    "desperdicio de tiempo explorando regiones no prometedoras. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Sexto Punto</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Generacion #1\n",
      "Fitness promedio:9.83 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "Generacion #2\n",
      "Fitness promedio:9.7 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "Generacion #3\n",
      "Fitness promedio:9.82 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "Generacion #4\n",
      "Fitness promedio:9.87 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "Generacion #5\n",
      "Fitness promedio:9.56 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "Generacion #6\n",
      "Fitness promedio:9.49 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "Generacion #7\n",
      "Fitness promedio:9.91 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "Generacion #8\n",
      "Fitness promedio:10.07 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "Generacion #9\n",
      "Fitness promedio:10.38 \n",
      "Mejor Individuo: (0, [4, 0, 3, 5, 7, 1, 6, 2])\n",
      "[9.83, 9.7, 9.82, 9.87, 9.56, 9.49, 9.91, 10.07, 10.38]\n",
      "Generacion #1\n",
      "Fitness promedio:9.77 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "Generacion #2\n",
      "Fitness promedio:9.51 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "Generacion #3\n",
      "Fitness promedio:10.38 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "Generacion #4\n",
      "Fitness promedio:10.06 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "Generacion #5\n",
      "Fitness promedio:9.9 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "Generacion #6\n",
      "Fitness promedio:9.75 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "Generacion #7\n",
      "Fitness promedio:9.9 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "Generacion #8\n",
      "Fitness promedio:10.56 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "Generacion #9\n",
      "Fitness promedio:10.23 \n",
      "Mejor Individuo: (0, [4, 6, 0, 3, 1, 7, 5, 2])\n",
      "[9.77, 9.51, 10.38, 10.06, 9.9, 9.75, 9.9, 10.56, 10.23]\n",
      "Generacion #1\n",
      "Fitness promedio:10.04 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "Generacion #2\n",
      "Fitness promedio:10.44 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "Generacion #3\n",
      "Fitness promedio:10.16 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "Generacion #4\n",
      "Fitness promedio:9.78 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "Generacion #5\n",
      "Fitness promedio:9.76 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "Generacion #6\n",
      "Fitness promedio:10.02 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "Generacion #7\n",
      "Fitness promedio:10.12 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "Generacion #8\n",
      "Fitness promedio:10.02 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "Generacion #9\n",
      "Fitness promedio:9.62 \n",
      "Mejor Individuo: (0, [3, 6, 4, 1, 5, 0, 2, 7])\n",
      "[10.04, 10.44, 10.16, 9.78, 9.76, 10.02, 10.12, 10.02, 9.62]\n",
      "Generacion #1\n",
      "Fitness promedio:10.54 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "Generacion #2\n",
      "Fitness promedio:9.96 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "Generacion #3\n",
      "Fitness promedio:10.24 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "Generacion #4\n",
      "Fitness promedio:10.34 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "Generacion #5\n",
      "Fitness promedio:9.2 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "Generacion #6\n",
      "Fitness promedio:10.38 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "Generacion #7\n",
      "Fitness promedio:10.18 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "Generacion #8\n",
      "Fitness promedio:9.52 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "Generacion #9\n",
      "Fitness promedio:10.24 \n",
      "Mejor Individuo: (0, [4, 1, 7, 0, 3, 6, 2, 5])\n",
      "[10.54, 9.96, 10.24, 10.34, 9.2, 10.38, 10.18, 9.52, 10.24]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "from pyeasyga import pyeasyga\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def create_individual(data):\n",
    "    individual = data[:]\n",
    "    random.shuffle(individual)\n",
    "    return individual\n",
    "\n",
    "def crossover(parent_1, parent_2):\n",
    "    crossover_index = random.randrange(1, len(parent_1))\n",
    "    child_1a = parent_1[:crossover_index]\n",
    "    child_1b = [i for i in parent_2 if i not in child_1a]\n",
    "    child_1 = child_1a + child_1b\n",
    "    child_2a = parent_2[crossover_index:]\n",
    "    child_2b = [i for i in parent_1 if i not in child_2a]\n",
    "    child_2 = child_2a + child_2b\n",
    "    return child_1, child_2\n",
    "\n",
    "def mutate(individual):\n",
    "    mutate_index1 = random.randrange(len(individual))\n",
    "    mutate_index2 = random.randrange(len(individual))\n",
    "    individual[mutate_index1], individual[mutate_index2] = individual[mutate_index2], individual[mutate_index1]\n",
    "\n",
    "\n",
    "def selection(population):\n",
    "    return random.choice(population)\n",
    "\n",
    "\n",
    "def fitness (individual, data):\n",
    "    collisions = 0\n",
    "    for item in individual:\n",
    "        item_index = individual.index(item)\n",
    "        for elem in individual:\n",
    "            elem_index = individual.index(elem)\n",
    "            if item_index != elem_index:\n",
    "                if item - (elem_index - item_index) == elem or (elem_index - item_index) + item == elem:\n",
    "                    collisions += 1\n",
    "    return collisions\n",
    "\n",
    "def print_board(board_representation):\n",
    "    def print_x_in_row(row_length, x_position):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "        print('\\n|', end = '')\n",
    "        for i in range(row_length):\n",
    "            if i == x_position:\n",
    "                print('{} |'.format('X'), end = '')\n",
    "            else:\n",
    "                print('  |', end = '')\n",
    "        print('')\n",
    "\n",
    "    def print_board_bottom(row_length):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "\n",
    "    num_of_rows = len(board_representation)\n",
    "    row_length = num_of_rows  \n",
    "\n",
    "    for row in range(num_of_rows):\n",
    "        print_x_in_row(row_length, board_representation[row])\n",
    "\n",
    "    print_board_bottom(row_length)\n",
    "    print('\\n', end = '')\n",
    "\n",
    "def datos_generacion():\n",
    "    fitness_po = [i.fitness for i in ga.current_generation]\n",
    "    average = sum(fitness_po)/len(fitness_po)\n",
    "    print(\"Fitness promedio:{} \".format(average))\n",
    "    print(\"Mejor Individuo: {}\".format(ga.best_individual()))\n",
    "    return average\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness  \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "\n",
    "ejemplo1 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo1.append(datos_generacion())\n",
    "\n",
    "print(ejemplo1)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.5,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo2 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo2.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo2)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=100,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.8,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo3 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo3.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo3)\n",
    "\n",
    "representacion = [0, 1, 2, 3, 4, 5, 6, 7]\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=100,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=1,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness       \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "ejemplo4 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo4.append(datos_generacion())\n",
    "   \n",
    "print(ejemplo4)\n",
    "\n",
    "labels = ['G1', 'G2', 'G3', 'G4', 'G5','G6', 'G7', 'G8', 'G9']\n",
    "plt.plot(labels, ejemplo1,'o-', labels, ejemplo2,'o-', labels, ejemplo3,'o-',labels, ejemplo4,'o-')\n",
    "plt.title('Fitness promedio mutacion')\n",
    "plt.xlabel('Generacion')\n",
    "plt.ylabel('Fitness promedio')\n",
    "plt.legend(('0.2', '0.5', '0.8','1'))\n",
    "plt.grid(True)\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Entre mayor es la probabilidad de mutación, los individuos nuevos van a perder parecido\n",
    "con los individuos \"padres\". Pero si la probabilidad es muy baja, muchos genes no son probrados \n",
    "dentro de los que fueron creados."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Septimo Punto</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ingrese el numero de su representacion: 25\n",
      "Representancion del problema de reinas: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25]\n",
      "Generacion #1\n",
      "Fitness promedio:33.99 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "Generacion #2\n",
      "Fitness promedio:33.47 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "Generacion #3\n",
      "Fitness promedio:33.38 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "Generacion #4\n",
      "Fitness promedio:33.42 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "Generacion #5\n",
      "Fitness promedio:33.24 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "Generacion #6\n",
      "Fitness promedio:33.9 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "Generacion #7\n",
      "Fitness promedio:33.39 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "Generacion #8\n",
      "Fitness promedio:33.37 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "Generacion #9\n",
      "Fitness promedio:32.11 \n",
      "Mejor Individuo: (10, [4, 13, 3, 18, 21, 8, 25, 1, 17, 0, 12, 6, 7, 5, 19, 14, 22, 24, 10, 16, 2, 9, 15, 11, 20, 23])\n",
      "[33.99, 33.47, 33.38, 33.42, 33.24, 33.9, 33.39, 33.37, 32.11]\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import random\n",
    "from pyeasyga import pyeasyga\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "\n",
    "def create_individual(data):\n",
    "    individual = data[:]\n",
    "    random.shuffle(individual)\n",
    "    return individual\n",
    "\n",
    "def crossover(parent_1, parent_2):\n",
    "    crossover_index = random.randrange(1, len(parent_1))\n",
    "    child_1a = parent_1[:crossover_index]\n",
    "    child_1b = [i for i in parent_2 if i not in child_1a]\n",
    "    child_1 = child_1a + child_1b\n",
    "    child_2a = parent_2[crossover_index:]\n",
    "    child_2b = [i for i in parent_1 if i not in child_2a]\n",
    "    child_2 = child_2a + child_2b\n",
    "    return child_1, child_2\n",
    "\n",
    "def mutate(individual):\n",
    "    mutate_index1 = random.randrange(len(individual))\n",
    "    mutate_index2 = random.randrange(len(individual))\n",
    "    individual[mutate_index1], individual[mutate_index2] = individual[mutate_index2], individual[mutate_index1]\n",
    "\n",
    "\n",
    "def selection(population):\n",
    "    return random.choice(population)\n",
    "\n",
    "\n",
    "def fitness (individual, data):\n",
    "    collisions = 0\n",
    "    for item in individual:\n",
    "        item_index = individual.index(item)\n",
    "        for elem in individual:\n",
    "            elem_index = individual.index(elem)\n",
    "            if item_index != elem_index:\n",
    "                if item - (elem_index - item_index) == elem or (elem_index - item_index) + item == elem:\n",
    "                    collisions += 1\n",
    "    return collisions\n",
    "\n",
    "def print_board(board_representation):\n",
    "    def print_x_in_row(row_length, x_position):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "        print('\\n|', end = '')\n",
    "        for i in range(row_length):\n",
    "            if i == x_position:\n",
    "                print('{} |'.format('X'), end = '')\n",
    "            else:\n",
    "                print('  |', end = '')\n",
    "        print('')\n",
    "\n",
    "    def print_board_bottom(row_length):\n",
    "        print('', end = '')\n",
    "        for _ in range(row_length):\n",
    "            print('---', end = '')\n",
    "\n",
    "    num_of_rows = len(board_representation)\n",
    "    row_length = num_of_rows  \n",
    "\n",
    "    for row in range(num_of_rows):\n",
    "        print_x_in_row(row_length, board_representation[row])\n",
    "\n",
    "    print_board_bottom(row_length)\n",
    "    print('\\n', end = '')\n",
    "\n",
    "def datos_generacion():\n",
    "    fitness_po = [i.fitness for i in ga.current_generation]\n",
    "    average = sum(fitness_po)/len(fitness_po)\n",
    "    print(\"Fitness promedio:{} \".format(average))\n",
    "    print(\"Mejor Individuo: {}\".format(ga.best_individual()))\n",
    "    return average\n",
    "\n",
    "n =int(input('ingrese el numero de su representacion: '))\n",
    "representacion = [i for i in range (n+1)] \n",
    "print(\"Representancion del problema de reinas:\",representacion)\n",
    "\n",
    "ga = pyeasyga.GeneticAlgorithm(representacion,\n",
    "                            population_size=200,\n",
    "                            generations=100,\n",
    "                            crossover_probability=0.8,\n",
    "                            mutation_probability=0.2,\n",
    "                            elitism=True,\n",
    "                            maximise_fitness=False)\n",
    "\n",
    "ga.create_individual = create_individual\n",
    "ga.crossover_function = crossover\n",
    "ga.mutate_function = mutate\n",
    "ga.selection_function = selection\n",
    "ga.fitness_function = fitness  \n",
    "ga.create_first_generation()\n",
    "ga.run()\n",
    "\n",
    "ejemplo1 = []\n",
    "\n",
    "for i in range(1, 10):\n",
    "    print(\"Generacion #{}\".format(i))\n",
    "    ga.create_next_generation()\n",
    "    ejemplo1.append(datos_generacion())\n",
    "\n",
    "print(ejemplo1)\n",
    "\n",
    "labels = ['G1', 'G2', 'G3', 'G4', 'G5','G6', 'G7', 'G8', 'G9']\n",
    "plt.plot(labels, ejemplo1,'o-')\n",
    "plt.title('Evolución fitness n generico')\n",
    "plt.xlabel('Generacion')\n",
    "plt.ylabel('Fitness promedio')\n",
    "plt.grid(True)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "<h3>Octavo Punto</h3>"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
